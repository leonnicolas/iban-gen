// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.4-0.20211007223312-7ee55a9ca6fb DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// The details BIC.
type BIC struct {
	Bank        string `json:"bank"`
	Bic         string `json:"bic"`
	CountryCode string `json:"countryCode"`
}

// An error response.
type Error struct {
	Error string `json:"error"`
}

// The details of a generated iban.
type IBANGeneration struct {
	Bankcode string  `json:"bankcode"`
	Bic      *string `json:"bic,omitempty"`
	Iban     string  `json:"iban"`
}

// An error response.
type ErrorResponse Error

// BicsParams defines parameters for Bics.
type BicsParams struct {
	// Return only BICs for the country code.
	CountryCode *string `json:"countryCode,omitempty"`

	// Return only BICs that match the bank name and sort them with levenshtein distance.
	Bank *string `json:"bank,omitempty"`
}

// RandomParams defines parameters for Random.
type RandomParams struct {
	// The BIC to use for generation.
	Bic *string `json:"bic,omitempty"`

	// The bank code to use for generation.
	BankCode *string `json:"bankCode,omitempty"`

	// The country code to use.
	CountryCode *string `json:"countryCode,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Bics request
	Bics(ctx context.Context, params *BicsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CountryCodes request
	CountryCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Random request
	Random(ctx context.Context, params *RandomParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Bics(ctx context.Context, params *BicsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBicsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountryCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountryCodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Random(ctx context.Context, params *RandomParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRandomRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBicsRequest generates requests for Bics
func NewBicsRequest(server string, params *BicsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CountryCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, *params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Bank != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bank", runtime.ParamLocationQuery, *params.Bank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCountryCodesRequest generates requests for CountryCodes
func NewCountryCodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/countryCodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRandomRequest generates requests for Random
func NewRandomRequest(server string, params *RandomParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Bic != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bic", runtime.ParamLocationQuery, *params.Bic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BankCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bankCode", runtime.ParamLocationQuery, *params.BankCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CountryCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, *params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Bics request
	BicsWithResponse(ctx context.Context, params *BicsParams, reqEditors ...RequestEditorFn) (*BicsResponse, error)

	// CountryCodes request
	CountryCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CountryCodesResponse, error)

	// Random request
	RandomWithResponse(ctx context.Context, params *RandomParams, reqEditors ...RequestEditorFn) (*RandomResponse, error)
}

type BicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BIC
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r BicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CountryCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CountryCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountryCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RandomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IBANGeneration
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r RandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BicsWithResponse request returning *BicsResponse
func (c *ClientWithResponses) BicsWithResponse(ctx context.Context, params *BicsParams, reqEditors ...RequestEditorFn) (*BicsResponse, error) {
	rsp, err := c.Bics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBicsResponse(rsp)
}

// CountryCodesWithResponse request returning *CountryCodesResponse
func (c *ClientWithResponses) CountryCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CountryCodesResponse, error) {
	rsp, err := c.CountryCodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountryCodesResponse(rsp)
}

// RandomWithResponse request returning *RandomResponse
func (c *ClientWithResponses) RandomWithResponse(ctx context.Context, params *RandomParams, reqEditors ...RequestEditorFn) (*RandomResponse, error) {
	rsp, err := c.Random(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRandomResponse(rsp)
}

// ParseBicsResponse parses an HTTP response from a BicsWithResponse call
func ParseBicsResponse(rsp *http.Response) (*BicsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BIC
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCountryCodesResponse parses an HTTP response from a CountryCodesWithResponse call
func ParseCountryCodesResponse(rsp *http.Response) (*CountryCodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountryCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRandomResponse parses an HTTP response from a RandomWithResponse call
func ParseRandomResponse(rsp *http.Response) (*RandomResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IBANGeneration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The by the generator supported BICs.
	// (GET /v1/bics)
	Bics(w http.ResponseWriter, r *http.Request, params BicsParams)
	// The by the generator country codes.
	// (GET /v1/countryCodes)
	CountryCodes(w http.ResponseWriter, r *http.Request)
	// Generate an iban.
	// (GET /v1/random)
	Random(w http.ResponseWriter, r *http.Request, params RandomParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Bics operation middleware
func (siw *ServerInterfaceWrapper) Bics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BicsParams

	// ------------- Optional query parameter "countryCode" -------------
	if paramValue := r.URL.Query().Get("countryCode"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "countryCode", r.URL.Query(), &params.CountryCode)
	if err != nil {
		err = fmt.Errorf("Invalid format for parameter countryCode: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	// ------------- Optional query parameter "bank" -------------
	if paramValue := r.URL.Query().Get("bank"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "bank", r.URL.Query(), &params.Bank)
	if err != nil {
		err = fmt.Errorf("Invalid format for parameter bank: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Bics(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CountryCodes operation middleware
func (siw *ServerInterfaceWrapper) CountryCodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CountryCodes(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Random operation middleware
func (siw *ServerInterfaceWrapper) Random(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RandomParams

	// ------------- Optional query parameter "bic" -------------
	if paramValue := r.URL.Query().Get("bic"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "bic", r.URL.Query(), &params.Bic)
	if err != nil {
		err = fmt.Errorf("Invalid format for parameter bic: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	// ------------- Optional query parameter "bankCode" -------------
	if paramValue := r.URL.Query().Get("bankCode"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "bankCode", r.URL.Query(), &params.BankCode)
	if err != nil {
		err = fmt.Errorf("Invalid format for parameter bankCode: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	// ------------- Optional query parameter "countryCode" -------------
	if paramValue := r.URL.Query().Get("countryCode"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "countryCode", r.URL.Query(), &params.CountryCode)
	if err != nil {
		err = fmt.Errorf("Invalid format for parameter countryCode: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Random(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	error
}
type UnmarshalingParamError struct {
	error
}
type RequiredParamError struct {
	error
}
type RequiredHeaderError struct {
	error
}
type InvalidParamFormatError struct {
	error
}
type TooManyValuesForParamError struct {
	error
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/bics", wrapper.Bics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/countryCodes", wrapper.CountryCodes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/random", wrapper.Random)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVzW7bPBB8FWK/76jacnMoqlvsJIUO/UEQ9BLkQFNri4lEKuTKrRHo3YulpMQ/sp2g",
	"6ckyxZ3dGQ5HT6BsWVmDhjwkT+DQV9Z4DH8unbPuulvhBWUNoSF+lFVVaCVJWzO+99bwmlc5lpKf/ne4",
	"gAT+G7+gj9u3fhxQoWmaCDL0yumKQSCBcyOQ34l+iBHwpq6OYafpjH+2y25yFBmS1IUX03Q2gggqZyt0",
	"pFsac2ke+JfWFUICnpw2S2gimGs1uK5sbcitZzbDgfdNBA4fa+0wg+Q2gGyXRG3Hu6ivtPN7VMTILfc9",
	"CgPMd0lgX3l8mnbbUOt0ev7tCxp0sm16TEa7EFIs282YCT2XZlhWNSzRYWkZ6jSLsCt66bDPhyu0Wdhh",
	"Hr5CJRbW9Ry0WQYSnlkUWmHnZyNLBv2a3vBspKngv7zzQ1dpHUSwQudb8Hg0GcW811ZoZKUhgbNRPIpZ",
	"HEl50GW8moznWoXnJdKBCeuqso7FnaazMBZLG44mzSCBKQMwqJMlEjoPye0uzjVS7YywplgHlMCYchSd",
	"GQVrx9Cadz/W6NYQ9Zy3Dftyc/G3LKsgw8UlRPvndHIIyiWJUpLKwyx8hoJ7Cmky4a0jXi7FL025KHCF",
	"xueE2ohMe5JGHRw43KnhSX9YT93r3Xnvou1I+xjHbwoyTVj6U4nGsdQ895bOyfVQvv2Uhc5CI8HWdWX7",
	"3J/aUq/QCL6mIwi1C1kXdKj3M6vxdkqHxKzLUrp1Z7X5uoXvDb3nPS5h025Y4rXm3XTagItnm4jvdRJ7",
	"mXJK9xMi7HD4p9Lv9uqUd9JktjyoeXfHhiJ5W+/rFudEbvBk03QmyIra41ZOWnPw+oXP3NDtm32fnl9c",
	"Xl2dfYonr0mMmz4VWIQ3DiHNw5HEmsTx5ziOXzvE5mF0c7xzWv5t+hwLnZ3v+YDv042QkXNbk5Dhy6gX",
	"WoUTeD+zd4NwyHfWbJqm+RMAAP//LCtfZ10KAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
